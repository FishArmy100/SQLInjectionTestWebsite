@inject IJSRuntime jsRuntime

<div class="admin-product">
	Name: @Product.Name <br />
	Cost: $@Product.Cost <br />
	Description: @Product.Description <br />
	<br />
	Count: @Product.Count <button @onclick="@(()=>m_IsUpdateingProduct = true)">Update</button>
	
	@if(m_IsUpdateingProduct)
	{
		<UserInputForm Object="m_Model" OnValidFormSubmit="OnProductModelSubmited" />
	}
	<br />

	<button @onclick="OnDeleteButtonPressed">Delete</button>
</div>

@code {
	private bool m_IsUpdateingProduct = false;

	[Parameter, EditorRequired]
	public ProductInfo Product { get; set; } = null!;

	private ProductCountModel m_Model = new ProductCountModel();

	protected override void OnParametersSet()
	{
		m_Model.Count = Product.Count;
	}

	private void OnProductModelSubmited(ProductCountModel model)
	{
		WebsiteDatabase.UpdateProductCount(Product.ID, model.Count);
		m_IsUpdateingProduct = false;
	}

	private async void OnDeleteButtonPressed()
	{
		bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the product {Product.Name}?");
		
		if(confirmed)
			WebsiteDatabase.DeleteProduct(Product.ID);
	}

	class ProductCountModel
	{
		public int Count { get; set; }
	}
}
