@using SQLInjectionTestWebsite.Shared.Utils
@inject NavigationManager Navigation

<div class = "navbar">
	@foreach((var name, var info) in Pages)
	{
		if (!info.DisplayFunc())
			continue;

		if(CurrentPageName == name)
		{
			<a id="active" @onclick = "@(() => OnPageClicked(name))" href="" @onclick:preventDefault>@name</a>
		}
		else
		{
			<a @onclick = "@(() => OnPageClicked(name))" href = "" @onclick:preventDefault>@name</a>
		}
	}

	<div id="user-name">
		Hi @(Store.CurrentUser.Match(ok => ok.UserName, () => "Guest"))!
	</div>

</div>

@code {
	public struct NavBarPage
	{
		public string Name;
		public string Path;
		public Func<bool> DisplayFunc;

		public NavBarPage(string name, string path, Func<bool> displayFunc)
		{
			Name = name;
			Path = path;
			DisplayFunc = displayFunc;
		}
	}

	[Parameter, EditorRequired]
	public string CurrentPageName { get; set; } = "";

	[Parameter]
	public Dictionary<string, NavBarPage> Pages { get; set; } = DefaultPages.ToDictionary<NavBarPage, string>(p => p.Name); 

	protected override void OnInitialized()
	{
		Store.CurrentUserChanged += async (_, _) => { await InvokeAsync(StateHasChanged); };
	}

	private void OnPageClicked(string name)
	{
		Navigation.NavigateTo(Pages[name].Path);
	}

	public static List<NavBarPage> DefaultPages = new List<NavBarPage> {
		new NavBarPage("Home", "/", () => true),
		new NavBarPage("Account", "/AccountInfoPage", () => Store.CurrentUser.HasValue()),
		new NavBarPage("Cart", "/CartPage", () => true),
		new NavBarPage("Sign In", "/SignInPage", () => true),
		new NavBarPage("Admin", "/AdminPage", () => Store.CurrentUser.Match(ok => ok.IsAdmin, () => false))
	};



	private static Option<string> GetUserName()
	{
		return Store.CurrentUser.Match(
			ok => new Option<string>(ok.UserName),
			() => new Option<string>());
	}
}
