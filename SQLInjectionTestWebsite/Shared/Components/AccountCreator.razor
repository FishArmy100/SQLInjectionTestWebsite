@using SQLInjectionTestWebsite.Shared
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms;
@using SQLInjectionTestWebsite.Shared.Utils


<EditForm Model=@m_CurrentModel OnValidSubmit="@OnCreateAccount">
	<style>
		div .error-message {
			color: red;
		}
	</style>
	<DataAnnotationsValidator/>
	<div class="form-group">
		<label for="UserName">Username:</label>
		<InputText @bind-Value=m_CurrentModel.UserName class="form-control" id="UserName"></InputText>
		<div class="error-message"><ValidationMessage For="@(()=>m_CurrentModel.UserName)" /></div>
	</div>
	<div class="form-group">
		<label for="Password">Password:</label>
		<InputText @bind-Value=m_CurrentModel.Password class="form-control" id="Password"></InputText>
		<div class="error-message"><ValidationMessage For="@(()=>m_CurrentModel.Password)" /></div>
	</div>
	<div class="form-group">
		<label for="Email">Email:</label>
		<InputText @bind-Value=m_CurrentModel.Email class="form-control" id="Email"></InputText>
		<div class="error-message"><ValidationMessage For="@(()=>m_CurrentModel.Email)" /></div>
	</div>
	<div class="form-group">
		<label for="CCN">Credit Card:</label>
		<InputText @bind-Value=m_CurrentModel.CreditCardNumber class="form-control" id="CCN"></InputText>
		<div class="error-message"><ValidationMessage For="@(()=>m_CurrentModel.CreditCardNumber)" /></div>
	</div>
	<div class="form-group">
		<label for="IsAdmin">Is Admin:</label>
		<InputCheckbox @bind-Value=m_CurrentModel.IsAdmin class="form-control" id="IsAdmin"></InputCheckbox>
		<div class="error-message"><ValidationMessage For="@(()=>m_CurrentModel.IsAdmin)" /></div>
	</div>
	<input type="submit" class="btn btn-primary" value="Save"/>
</EditForm>


@if (m_FailedToSignInError.HasValue())
{
	<div>
		<style>
			div #sign-in-error{
				color: red;
				border: dashed;
				border-color: red;
			}
		</style>
		<div id="sign-in-error">
			@m_FailedToSignInError.Value
		</div>
	</div>
}

@code {
	[Parameter, EditorRequired]
	public Action<AccountInfo> OnValidAccountCreated { get; set; } = null!;

	private AccountModel m_CurrentModel { get; set; } = new AccountModel();
	private Option<string> m_FailedToSignInError;

	class AccountModel
	{
		[Required]
		[StringLength(64, MinimumLength = 4, ErrorMessage = "Username must be between 4-64 charictors long.")]
		public string? UserName { get; set; } = "";
		[Required]
		[StringLength(64, MinimumLength = 8, ErrorMessage = "Password must be between 8-64 charictors long.")]
		public string? Password { get; set; } = "";
		[Required]
		public string? Email { get; set; } = "";
		[Required]
		public string? CreditCardNumber { get; set; } = "";

		public bool IsAdmin { get; set; } = false;
	}

	void OnCreateAccount(EditContext context)
	{
		AccountInfo info = 
		AccountInfo.GenAccount(m_CurrentModel.UserName ?? throw new NullReferenceException(), m_CurrentModel.Password ?? throw new NullReferenceException(), m_CurrentModel.Email ?? throw new NullReferenceException(), m_CurrentModel.CreditCardNumber ?? throw new NullReferenceException(), 0, m_CurrentModel.IsAdmin);


		ValidationContext c = new ValidationContext(m_CurrentModel);
		try { Validator.ValidateObject(m_CurrentModel, c); }
		catch(ValidationException e)
		{
			m_FailedToSignInError = e.Message;
			return;
		}


		if(ValidateAccount(info))
			OnValidAccountCreated(info);
	}

	bool ValidateAccount(AccountInfo info)
	{
		bool created = WebsiteDatabase.TryCreateAccount(info);
		if (!created)
			m_FailedToSignInError = $"Account with the username '{info.UserName}' already exists.";

		return created;
	}
}
