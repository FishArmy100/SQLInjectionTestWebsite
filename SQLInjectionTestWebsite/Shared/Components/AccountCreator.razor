@using SQLInjectionTestWebsite.Shared
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using SQLInjectionTestWebsite.Shared.Utils
@using Meziantou.AspNetCore.Components
@using System.ComponentModel


<EditForm Model=@m_CurrentModel OnValidSubmit="@OnCreateAccount">
	<style>
		div .error-message {
			color: red;
		}
	</style>
	<DataAnnotationsValidator/>
	
	<GenericForm Model="m_CurrentModel" EditorClass="form-control">
        <FieldTemplate Context="field">
            <div class="form-group">
                <label for="@field.EditorId">@field.DisplayName</label>
                @field.EditorTemplate
				<div class="error-message">@field.FieldValidationTemplate</div>
            </div>
        </FieldTemplate>
    </GenericForm>

	<input type="submit" class="btn btn-primary" value="Save"/>
</EditForm>


@if (m_FailedToSignInError.HasValue())
{
	<div>
		<style>
			div #sign-in-error{
				color: red;
				border: dashed;
				border-color: red;
			}
		</style>
		<div id="sign-in-error">
			@m_FailedToSignInError.Value
		</div>
	</div>
}

@code {
	[Parameter, EditorRequired]
	public Action<AccountInfo> OnValidAccountCreated { get; set; } = null!;

	private AccountModel m_CurrentModel { get; set; } = new AccountModel();
	private Option<string> m_FailedToSignInError;

	class AccountModel
	{
		[Required]
		[DisplayName("Username: ")]
		[StringLength(64, MinimumLength = 4, ErrorMessage = "Username must be between 4-64 charictors long.")]
		public string? UserName { get; set; } = "";

		[Required]
		[DisplayName("Password: ")]
		[StringLength(64, MinimumLength = 8, ErrorMessage = "Password must be between 8-64 charictors long.")]
		public string? Password { get; set; } = "";

		[Required]
		[DisplayName("Email: ")]
		public string? Email { get; set; } = "";

		[Required]
		[DisplayName("Credit Card: ")]
		public string? CreditCardNumber { get; set; } = "";

		[DisplayName("Is Admin: ")]
		public bool IsAdmin { get; set; } = false;
	}

	void OnCreateAccount(EditContext context)
	{
		AccountInfo info = 
		AccountInfo.GenAccount(m_CurrentModel.UserName ?? throw new NullReferenceException(), m_CurrentModel.Password ?? throw new NullReferenceException(), m_CurrentModel.Email ?? throw new NullReferenceException(), m_CurrentModel.CreditCardNumber ?? throw new NullReferenceException(), 0, m_CurrentModel.IsAdmin);


		ValidationContext c = new ValidationContext(m_CurrentModel);
		try { Validator.ValidateObject(m_CurrentModel, c); }
		catch(ValidationException e)
		{
			m_FailedToSignInError = e.Message;
			return;
		}


		if(ValidateAccount(info))
			OnValidAccountCreated(info);
	}

	bool ValidateAccount(AccountInfo info)
	{
		bool created = WebsiteDatabase.TryCreateAccount(info);
		if (!created)
			m_FailedToSignInError = $"Account with the username '{info.UserName}' already exists.";

		return created;
	}
}
