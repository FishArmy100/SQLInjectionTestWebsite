@page "/SignInPage"
@using SQLInjectionTestWebsite.Shared
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms;
@using SQLInjectionTestWebsite.Shared.Utils
@using SQLInjectionTestWebsite.Shared.Components;

<NavBar CurrentPageName="Sign In"></NavBar>
<h3>Sign In Page:</h3>

@if(m_CurrentState != SignInState.SelectingSignIn)
{
	<div>
		<button @onclick="@(() => m_CurrentState = SignInState.SelectingSignIn)">Back</button>
	</div>
}

@if(m_CurrentState == SignInState.SelectingSignIn)
{
	<div>
		<button @onclick="@(() => m_CurrentState = SignInState.SigningIn)">Sign In</button>
	</div>

	<div>
		<button @onclick="@(() => m_CurrentState = SignInState.CreatingAccount)">Create Account</button>
	</div>
}
else if(m_CurrentState == SignInState.CreatingAccount)
{
	<AccountCreator OnValidAccountCreated="OnValidAccountCreated"/>
}
else if(m_CurrentState == SignInState.SigningIn)
{
	<SignInComponent OnValidSignIn="OnValidSignIn"/>
}

@if(m_IsSignedIn)
{
	<div>
		<button @onclick="OnSignOut">Sign Out</button>
	</div>
}

@code {
	private bool m_IsSignedIn => Store.CurrentUser.HasValue();
	private SignInState m_CurrentState = SignInState.SelectingSignIn;

	enum SignInState
	{
		SelectingSignIn,
		SigningIn,
		CreatingAccount,
	}

	void OnSignOut()
	{
		Store.CurrentUser = new Option<AccountInfo>();
	}

	void OnValidAccountCreated(AccountInfo info)
	{
		Store.CurrentUser = new Option<AccountInfo>(info);
		m_CurrentState = SignInState.SelectingSignIn;
		StateHasChanged();
	}

	void OnValidSignIn(AccountInfo info)
	{
		Store.CurrentUser = new Option<AccountInfo>(info);
		m_CurrentState = SignInState.SelectingSignIn;
		StateHasChanged();
	}
}
